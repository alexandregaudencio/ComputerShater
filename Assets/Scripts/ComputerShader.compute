
#pragma kernel CSMain


int numSphere;
int numCube;
float deltaTime;
int parar;


struct Sphere
{
     float radius;
     float speed;
     float massa;
     float forca;
     float4 color;
     float3 position;
     

};
struct Cube
{
    
    float3 position;
    float3 scale;

};

RWStructuredBuffer<Sphere> sphere;
RWStructuredBuffer<Cube> cube;

float rand(float2 co) {
    return (frac(sin(dot(co.xy, float2(12.9898, 78233))) * 43758.5453)) * 1;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x < numSphere)
    {
        Sphere s = sphere[id.x];
        
        
        for (int i = 0; i < numCube; i++)
        {
            Cube c = cube[i];
            
            

            if ((s.position.y + s.radius >= c.position.y - c.scale.y/2.0f) && (s.position.y - s.radius <= c.position.y + c.scale.y / 2.0f) && (s.position.x + s.radius >= c.position.x - c.scale.x / 2.0f) && (s.position.x - s.radius <= c.position.x + c.scale.x / 2.0f) && (s.position.y - s.radius <= c.position.y + c.scale.y / 2.0f) && (s.position.z + s.radius >= c.position.z - c.scale.z / 2.0f) && (s.position.z - s.radius <= c.position.z + c.scale.z / 2.0f) && parar == 0)
            {
                parar = 1;
                //c.position.x = 30;

                s.color = float4(rand(float2(s.color.r, s.color.g)),rand(float2(s.color.g, s.color.b)),rand(float2(s.color.r, s.color.b)), 1);
            }
            else
            {
                if (parar == 0)
                {
                    s.speed = s.massa + s.forca;
                    s.position.y -= s.speed  * deltaTime;
                }
            }
                
            
            cube[i] = c;
        }

        sphere[id.x] = s;
        
    }

    
}
